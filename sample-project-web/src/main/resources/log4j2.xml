<?xml version="1.0" encoding="UTF-8"?>
<!--&lt;!&ndash;Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出&ndash;&gt;-->
<!--&lt;!&ndash;monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数&ndash;&gt;-->
<!--<configuration monitorInterval="5">-->
<!--    &lt;!&ndash;日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL &ndash;&gt;-->

<!--    &lt;!&ndash;变量配置&ndash;&gt;-->
<!--    &lt;!&ndash;    <Properties>&ndash;&gt;-->
<!--    &lt;!&ndash;        &lt;!&ndash; 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符&ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;        &lt;!&ndash; %logger{128} 表示 Logger 名字最长128个字符 &ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;        <property name="LOG_PATTERN" value="%date{HH:mm:ss.SSS} [%thread] %-5level %logger{128} - %msg%n"/>&ndash;&gt;-->
<!--    &lt;!&ndash;        &lt;!&ndash; 定义日志存储的路径 &ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;        <property name="FILE_PATH" value="更换为你的日志路径"/>&ndash;&gt;-->
<!--    &lt;!&ndash;        <property name="FILE_NAME" value="更换为你的项目名"/>&ndash;&gt;-->
<!--    &lt;!&ndash;    </Properties>&ndash;&gt;-->
<!--    &lt;!&ndash;控制台&ndash;&gt;-->
<!--    <Console name="Console" target="SYSTEM_OUT">-->
<!--        <PatternLayout alwaysWriteExceptions="true"-->
<!--                       pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS} %5p %c:%L] %m%n"/>-->
<!--    </Console>-->
<!--    &lt;!&ndash;    <appenders>&ndash;&gt;-->
<!--    &lt;!&ndash;        &lt;!&ndash;文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用&ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;        <File name="FileLog" fileName="${FILE_PATH}/test.log" append="false">&ndash;&gt;-->
<!--    &lt;!&ndash;            <PatternLayout pattern="${LOG_PATTERN}"/>&ndash;&gt;-->
<!--    &lt;!&ndash;        </File>&ndash;&gt;-->

<!--    &lt;!&ndash;        &lt;!&ndash; 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档&ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;        <RollingFile name="RollingFileInfo" fileName="${FILE_PATH}/info.log"&ndash;&gt;-->
<!--    &lt;!&ndash;                     filePattern="${FILE_PATH}/${FILE_NAME}-INFO-%d{yyyy-MM-dd}_%i.log.gz">&ndash;&gt;-->
<!--    &lt;!&ndash;            &lt;!&ndash;控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）&ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>&ndash;&gt;-->
<!--    &lt;!&ndash;            <PatternLayout pattern="${LOG_PATTERN}"/>&ndash;&gt;-->
<!--    &lt;!&ndash;            <Policies>&ndash;&gt;-->
<!--    &lt;!&ndash;                &lt;!&ndash;interval属性用来指定多久滚动一次，默认是1 hour&ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;                <TimeBasedTriggeringPolicy interval="1"/>&ndash;&gt;-->
<!--    &lt;!&ndash;                <SizeBasedTriggeringPolicy size="10MB"/>&ndash;&gt;-->
<!--    &lt;!&ndash;            </Policies>&ndash;&gt;-->
<!--    &lt;!&ndash;            &lt;!&ndash; DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖&ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;            <DefaultRolloverStrategy max="15"/>&ndash;&gt;-->
<!--    &lt;!&ndash;        </RollingFile>&ndash;&gt;-->

<!--    &lt;!&ndash;        &lt;!&ndash; 这个会打印出所有的warn及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档&ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;        <RollingFile name="RollingFileWarn" fileName="${FILE_PATH}/warn.log"&ndash;&gt;-->
<!--    &lt;!&ndash;                     filePattern="${FILE_PATH}/${FILE_NAME}-WARN-%d{yyyy-MM-dd}_%i.log.gz">&ndash;&gt;-->
<!--    &lt;!&ndash;            &lt;!&ndash;控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）&ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>&ndash;&gt;-->
<!--    &lt;!&ndash;            <PatternLayout pattern="${LOG_PATTERN}"/>&ndash;&gt;-->
<!--    &lt;!&ndash;            <Policies>&ndash;&gt;-->
<!--    &lt;!&ndash;                &lt;!&ndash;interval属性用来指定多久滚动一次，默认是1 hour&ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;                <TimeBasedTriggeringPolicy interval="1"/>&ndash;&gt;-->
<!--    &lt;!&ndash;                <SizeBasedTriggeringPolicy size="10MB"/>&ndash;&gt;-->
<!--    &lt;!&ndash;            </Policies>&ndash;&gt;-->
<!--    &lt;!&ndash;            &lt;!&ndash; DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖&ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;            <DefaultRolloverStrategy max="15"/>&ndash;&gt;-->
<!--    &lt;!&ndash;        </RollingFile>&ndash;&gt;-->

<!--    &lt;!&ndash;        &lt;!&ndash; 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档&ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;        <RollingFile name="RollingFileError" fileName="${FILE_PATH}/error.log"&ndash;&gt;-->
<!--    &lt;!&ndash;                     filePattern="${FILE_PATH}/${FILE_NAME}-ERROR-%d{yyyy-MM-dd}_%i.log.gz">&ndash;&gt;-->
<!--    &lt;!&ndash;            &lt;!&ndash;控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）&ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>&ndash;&gt;-->
<!--    &lt;!&ndash;            <PatternLayout pattern="${LOG_PATTERN}"/>&ndash;&gt;-->
<!--    &lt;!&ndash;            <Policies>&ndash;&gt;-->
<!--    &lt;!&ndash;                &lt;!&ndash;interval属性用来指定多久滚动一次，默认是1 hour&ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;                <TimeBasedTriggeringPolicy interval="1"/>&ndash;&gt;-->
<!--    &lt;!&ndash;                <SizeBasedTriggeringPolicy size="10MB"/>&ndash;&gt;-->
<!--    &lt;!&ndash;            </Policies>&ndash;&gt;-->
<!--    &lt;!&ndash;            &lt;!&ndash; DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖&ndash;&gt;&ndash;&gt;-->
<!--    &lt;!&ndash;            <DefaultRolloverStrategy max="15"/>&ndash;&gt;-->
<!--    &lt;!&ndash;        </RollingFile>&ndash;&gt;-->

<!--    &lt;!&ndash;    </appenders>&ndash;&gt;-->

<!--    &lt;!&ndash;Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。&ndash;&gt;-->
<!--    &lt;!&ndash;然后定义loggers，只有定义了logger并引入的appender，appender才会生效&ndash;&gt;-->
<!--    <loggers>-->
<!--        &lt;!&ndash;混合异步日志配置 需要引入disruptor （includeLocation显示类 方法和行号）&ndash;&gt;-->
<!--        &lt;!&ndash;可以指定到代码&ndash;&gt;-->
<!--        &lt;!&ndash;        <AsyncLogger name="org.primary.sample" level="trace" additivity="false" includeLocation="true">&ndash;&gt;-->
<!--        &lt;!&ndash;            <appender-ref ref="RollingFileInfo"/>&ndash;&gt;-->
<!--        &lt;!&ndash;        </AsyncLogger>&ndash;&gt;-->
<!--        &lt;!&ndash;可以指定到appender&ndash;&gt;-->
<!--        &lt;!&ndash;        <AsyncLogger name="RollingFileWarn" level="trace" additivity="false" includeLocation="true">&ndash;&gt;-->
<!--        &lt;!&ndash;            <appender-ref ref="RollingFileWarn"/>&ndash;&gt;-->
<!--        &lt;!&ndash;        </AsyncLogger>&ndash;&gt;-->
<!--        &lt;!&ndash;全局异步日志 有三种配置方式-->
<!--            1.系统启动时加载 System.setProperty("log4j2.contextSelector, "org.apache.logging.log4j.core.async.AsyncLoggerContextSelector");-->
<!--            2.系统启动时修改jdk配置：java -Dog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector （即修改启动脚本）-->
<!--            3.在系统resources目录下添加文件：resources下新建：log4j2.component.properties文件，内容如下：-->
<!--            Log4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector-->
<!--            系统启动会扫这个文件（所以这个文件还可以做其他很多事情...）-->
<!--        &ndash;&gt;-->

<!--        &lt;!&ndash;过滤掉spring和mybatis的一些无用的DEBUG信息&ndash;&gt;-->
<!--        &lt;!&ndash;        <logger name="org.mybatis" level="info" additivity="false">&ndash;&gt;-->
<!--        &lt;!&ndash;            <AppenderRef ref="Console"/>&ndash;&gt;-->
<!--        &lt;!&ndash;        </logger>&ndash;&gt;-->
<!--        &lt;!&ndash;监控系统信息&ndash;&gt;-->
<!--        &lt;!&ndash;若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。&ndash;&gt;-->
<!--        &lt;!&ndash;        <Logger name="org.springframework" level="info" additivity="false">&ndash;&gt;-->
<!--        &lt;!&ndash;            <AppenderRef ref="Console"/>&ndash;&gt;-->
<!--        &lt;!&ndash;        </Logger>&ndash;&gt;-->

<!--        <Root level="DEBUG">-->
<!--            <AppenderRef ref="Console"/>-->
<!--            &lt;!&ndash;            <appender-ref ref="FileLog"/>&ndash;&gt;-->
<!--            &lt;!&ndash;            <appender-ref ref="RollingFileInfo"/>&ndash;&gt;-->
<!--            &lt;!&ndash;            <appender-ref ref="RollingFileWarn"/>&ndash;&gt;-->
<!--            &lt;!&ndash;            <appender-ref ref="RollingFileError"/>&ndash;&gt;-->
<!--        </Root>-->
<!--    </loggers>-->

<!--</configuration>-->
<configuration>
    <appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout alwaysWriteExceptions="true"
                           pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS} %5p %c:%L] %m%n"/>
        </Console>
    </appenders>
    <loggers>
        <Root level="DEBUG">
            <AppenderRef ref="Console"/>
        </Root>
    </loggers>

</configuration>